 

========================================
DOWNLOAD Software for 8086
========================================

GOOGLE : 8086 emulator
	emu8086


https://emu8086-microprocessor-emulator.en.download.it/downloading





========================================
TABS of emu8086
========================================

NEW
OPEN
SAVE
COMPILE
EMULATE - DEBUG MODE
CALCULATOR
CONVERT


Reg in 8086
-----------



    GENERAL PURPOSE REG
    --------------------
        AX	Accumulator register (16-bit)
            AH	High byte of AX (8-bit)
            AL	Low byte of AX (8-bit)
            
        BX	Base register (16-bit)
            BH	High byte of BX (8-bit)
            BL	Low byte of BX (8-bit)
            
        CX	Counter register (16-bit)
            CH	High byte of CX (8-bit)
            CL	Low byte of CX (8-bit)
            
        DX	Data register (16-bit)
            DH	High byte of DX (8-bit)
            DL	Low byte of DX (8-bit)




    SEGMENT REG (hold base address)
    ------------
        CS	Code segment register (16-bit)
        DS	Data segment register (16-bit)
        SS	Stack segment register (16-bit)
        ES	Extra segment register (16-bit)





segment offset pointer
(to make 20 bit physical address)
--------------------------------------------   
      SP	Stack pointer (16-bit)
      BP	Base pointer (16-bit)
      SI	Source index (16-bit)
      DI	Destination index (16-bit)
      IP	Instruction pointer (16-bit)




Flags	Flags register (16-bit)
--------------------------------
    CF	Carry flag (bit 0)
    PF	Parity flag (bit 2)
    AF	Auxiliary carry flag (bit 4)
    ZF	Zero flag (bit 6)
    SF	Sign flag (bit 7)
    TF	Trap flag (bit 8)
    IF	Interrupt enable flag (bit 9)
    DF	Direction flag (bit 10)
    OF	Overflow flag (bit 11)




========================================
Physical address(PA) clculation in 8086
A0 - A19 = 20 bit
========================================


		---------------------------------
		seg reg(16)	offset pointer(16)
		---------	------------------
		CS		IP
		SS		SP/BP
		DS		SI
		ES		DI
		---------------------------------


In the 8086 microprocessor, 
physical addresses (PA) are calculated
using a combination of segment and offset addresses. 


	formula:
	.........
	Physical Address (PA) = ( Segment × 10H ) + Offset
	

EXAMPLE 1:
---------
IF CS is 1245h and instruction pointer 1561h. 
Find the physical address PA of intruction?

	(PA) = ( Segment × 10H ) + Offset
	     =  1245 * 10H + 1561H 
	     = 139B1h


1	3	9	B	1 h
0001	0011	1001	1100	0001 B
----------------20 bit-----------------




EXAMPLE 2:
---------
Segment (DS) = 0x3000
Offset (SI) = 0x0020


	PA = (DS × 10H) + SI
	= (0x3000 × 10H) + 0x0020
	= 0x30020

	0x30020
	
	0x" indicates  represented in hexadecimal notation.
	"20030" is the actual memory address.





EXAMPLE 3:
---------
Segment (CS) = 0x8000
Offset (IP) = 0x00A0


	PA = (CS × 10H) + IP
	= (0x8000 × 10H) + 0x00A0
	= 0x800A0




EXAMPLE 4:
---------
Segment (SS) = 0xA000
Offset (SP/BP) = 0x0020
	
	PA = (SS × 10H) + SP/BP
	= (0xA000 × 10H) + 0x0020
	= 0xA020




========================================
WHAT IS PA AND LA?
========================================


Physical Address:
------------------
	A physical address refers to the actual memory 
	location in the computer's physical memory (RAM)
	where data is stored.
	
	In the 8086 architecture, a physical address is 
	formed by combining the contents of a 
	segment register and an offset register

	(PA) = ( Segment × 10H ) + Offset


Logical Address:
------------------
	A logical address is an address generated 
	by the CPU during the execution of a program. 
	It represents the location of data relative to 
	the start of a specific segment.
	
	In the 8086 architecture, a logical address 
	consists of a segment address and an offset address. 
	The segment address identifies a segment in 
	the memory, and the offset address specifies the location 
	of data within that segment.



	Suppose we have the following scenario:
	
		Segment Register (DS) = 0x2000
		Offset Pointer (SI) = 0x0030
	
	
	Logical Address = (Segment × 10H) + Offset
	Logical Address = (0x2000 × 10H) + 0x0030
			= (0x20000) + 0x0030
			= 0x20030
	
		So, the logical address 
		corresponding to DS is 0x20030.
	
	
	Physical Address = (Segment × 10H) + Offset
	Physical Address = (0x2000 × 10H) + 0x0030
			= (0x20000) + 0x0030
			= 0x20030
	
			So, the physical address
			corresponding to DS
			is also 0x20030.








========================================
LAB 1 : ADDITION of 16 bit no
========================================
NEW >> empty WORKSPACE

      .........................
      MOV AX 1234h
      MOV B,4321h
      ADD AX,BX
      HLT      
      .........................EMULATE > PROBLEM (BUG)
      


    .........................
    MOV AX,1234h
    MOV BX,4321h
    ADD AX,BX
    HLT
    ......................... NO PROBLEM , DEBUG





	AX=5555  BX=4321  CX=0000  DX=0000  SP=FFFE  BP=0000  SI=0000  DI=0000
	--------
	DS=0100  ES=0100  SS=0100  CS=0100  IP=0008   NV UP EI PL NZ NA PE NC
					    ------
	0100:0008 F4            HLT

                                               




		
		EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
		 
		noname.bin_ -- emu8086 assembler version: 4.08  
		 
		[ 6/9/2024  --  3:15:28 PM ] 
		 
		====================================================================
		[LINE]     LOC: MACHINE CODE                          SOURCE
		====================================================================
		 
		[   1]    0000: B8 34 12                              MOV AX,1234h
		[   2]    0003: BB 21 43                              MOV BX,4321h
		[   3]    0006: 03 C3                                 ADD AX,BX
		[   4]    0008: F4                                    HLT
		[   5]        :                                       
		[   6]        :                                       
		[   7]        :                                       
		[   8]        :                                       
		[   9]        :                                       
		[  10]        :                                       
		[  11]        :                                       
		 
		=======================================================================









========================================
LAB 2 : ADDITION of 16 bit no , reg change
========================================



	MOV AX,1234h
	MOV BX,4321h
	MOV CX,BX
	ADD AX,CX
	HLT


                                         


	====================================================================
	[LINE]     LOC: MACHINE CODE                          SOURCE
	====================================================================
	 
	[   1]    0000: B8 34 12                              MOV AX,1234h
	[   2]    0003: BB 21 43                              MOV BX,4321h
	[   3]    0006: 8B CB                                 MOV CX,BX
	[   4]    0008: 03 C1                                 ADD AX,CX
	[   5]    000A: F4                                    HLT





	AX=1234  BX=0000  CX=0000  DX=0000  SP=FFFE  BP=0000  SI=0000  DI=0000
	DS=0100  ES=0100  SS=0100  CS=0100  IP=0003   NV UP EI PL NZ NA PO NC
	0100:0003 BB2143        MOV BX, 04321h
	
	AX=1234  BX=4321  CX=0000  DX=0000  SP=FFFE  BP=0000  SI=0000  DI=0000
	DS=0100  ES=0100  SS=0100  CS=0100  IP=0006   NV UP EI PL NZ NA PO NC
	0100:0006 8BCB          MOV CX, BX
	
	AX=1234  BX=4321  CX=4321  DX=0000  SP=FFFE  BP=0000  SI=0000  DI=0000
	DS=0100  ES=0100  SS=0100  CS=0100  IP=0008   NV UP EI PL NZ NA PO NC
	0100:0008 03C1          ADD AX, CX
	
	AX=5555  BX=4321  CX=4321  DX=0000  SP=FFFE  BP=0000  SI=0000  DI=0000
	DS=0100  ES=0100  SS=0100  CS=0100  IP=000A   NV UP EI PL NZ NA PE NC
	0100:000A F4            HLT
	
	AX=5555  BX=4321  CX=4321  DX=0000  SP=FFFE  BP=0000  SI=0000  DI=0000
	DS=0100  ES=0100  SS=0100  CS=0100  IP=000A   NV UP EI PL NZ NA PE NC
	0100:000A F4









========================================
LAB 4 :Data Transfer Program

Transfer a block of byte from source array 
to destination array
========================================
	
	Total array size = 05

	Before execution

	S1 is var		SI is offset

	....................................
	01	02 	03	04	05
	-------------source data ----------


		
			After execution
		
			S2 is var		DI is offset
		
			..................................
			01	02 	03	04	05
			--------destination data -----------







========================================
LAB x :
========================================












========================================
LAB x :
========================================












========================================
LAB x :
========================================












========================================
LAB x :
========================================












========================================

========================================












========================================

========================================












========================================

========================================












========================================

========================================












========================================

========================================












========================================

========================================

























