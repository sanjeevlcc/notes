
Unit 2. Architecture 4 Hrs.
    2.1 Architectural Styles
    2.2 Middleware organization
    2.3 System Architecture
    2.4 Example Architectures



==========================================
2.1 Architectural Styles
==========================================

Architectural styles in distributed systems define 
the structure and organization of system components to
achieve desired performance, scalability, and manageability.


Layered Architecture
-----------------------

    Layered architecture is an architectural style that
    organizes a system into hierarchical layers. 
    
    Each layer has a specific role and responsibility, providing
    services to the layer above it and consuming services from 
    the layer below it. 

    Example: OSI model in networking.
    
    Characteristics: Organized in hierarchical layers, each with a specific function.
    
    Advantages: Modularity, separation of concerns, ease of maintenance.
    
    Disadvantages: Potential performance overhead, dependency between layers.
                        
                    +---------------------+
                    |  Presentation Layer |
                    |  (UI/UX)            |
                    +---------------------+
                              |
                              v
                    +---------------------+
                    |  Business Logic     |
                    |  Layer              |
                    |  (Core Functionality|
                    |  and Business Rules)|
                    +---------------------+
                              |
                              v
                    +---------------------+
                    |  Data Access Layer  |
                    |  (Database Operations)|
                    +---------------------+
                              |
                              v
                    +---------------------+
                    |  Physical Layer     |
                    |  (Hardware and      |
                    |  Network Infrastructure)|
                    +---------------------+

            A typical web application using a layered 
            architecture might have the following layers:




Client-Server Architecture
--------------------------
    Client-server architecture is an architectural model
    that separates a system into two main components: 
        clients and servers. 
    
    Clients request services, and servers provide these services. 
    This model is widely used in networked applications.
        

    Example: Web applications.

    Characteristics: Clients request services, servers provide services.
   
    Advantages: Centralized control, scalability, manageability.

    Disadvantages: Single point of failure, server overload.


            +-----------+         +---------------+
            |           |         |               |
            |  Client 1 |<------->|   Server      |
            |  (Browser)|         | (Web Server)  |
            +-----------+         +---------------+
                   |
                   |
            +-----------+
            |           |
            |  Client 2 |
            |  (Browser)|
            +-----------+
                   |
                   |
            +-----------+
            |           |
            |  Client 3 |
            |  (Browser)|
            +-----------+
            A web application where web browsers
            act as clients and a web server hosts the application.






Event-Driven Architecture
----------------------------- 

    Event-Driven Architecture (EDA) is an architectural style
    in which the flow of the program is determined by events
    such as user actions, sensor outputs, or messages from 
    other programs/services. 
    
    Components communicate through events, making the 
    system highly decoupled and responsive.
    
    Example: GUI applications, IoT systems.
    
    Characteristics: Components communicate through events, asynchronous.
    
    Advantages: High decoupling, scalability, responsiveness.
    
    Disadvantages: Complexity in managing events, debugging challenges.
    
    
    +-------------+       +-----------------+        +-------------------+
    |  Event      |----->| Event Processor 1|------> | Event Processor 2  |
    |  Source     |      | (Inventory)      |        | (Payment)          |
    | (User Order)|      +-----------------+         +-------------------+
    +-------------+            |                          |
                               v                          v
                        +-----------------+        +-------------------+
                        | Event Processor 3|<----- | Event Processor 4  |
                        | (Shipping)      |        | (Notification)     |
                        +-----------------+        +-------------------+


            An e-commerce platform where different
            services (inventory, payment, shipping) react
            to events such as a new order being placed.





Microservices Architecture
-----------------------
    Microservices architecture is an architectural style
    that structures an application as a collection of
    small, independent services, each running in its 
    own process and communicating through lightweight 
    mechanisms, often HTTP-based APIs. 
    
    Each service is focused on a specific business 
    function and can be developed, deployed, and scaled independently.    

    Example: Netflix, Amazon.
    
    Characteristics: Independent, loosely coupled services with specific functionality.
    
    Advantages: Scalability, fault isolation, ease of deployment.
    
    Disadvantages: Complexity in management, inter-service communication overhead.

    +-----------------+     +-----------------+
    |  User Service   |     | Product Service |
    |  (User Data)    |<--> | (Product Catalog)|
    +-----------------+     +-----------------+
              |                     |
              v                     v
    +-----------------+     +-----------------+
    | Order Service   |     | Payment Service |
    | (Order Process) |<--> | (Payment Gateway)|
    +-----------------+     +-----------------+
              |
              v
    +-----------------+
    | Shipping Service|
    | (Shipping Info) |
    +-----------------+


        +-----------------+     +-----------------+
        |  User Service   |     | Product Service |
        |  (User Data)    |<--> | (Product Catalog)|
        +-----------------+     +-----------------+
                  |                     |
                  v                     v
        +-----------------+     +-----------------+
        | Order Service   |     | Payment Service |
        | (Order Process) |<--> | (Payment Gateway)|
        +-----------------+     +-----------------+
                  |
                  v
        +-----------------+
        | Shipping Service|
        | (Shipping Info) |
        +-----------------+





Service-Oriented Architecture (SOA)
----------------------------------
    Example: Enterprise applications.
    
    Characteristics: Uses services to support business 
                    processes, promotes reusability.
    
    Advantages: Interoperability, reusability, flexibility.
    
    Disadvantages: Overhead of service management, complexity.


            


==========================================
2.2 Middleware organization
==========================================
Middleware is software that provides common 
services and capabilities to applications outside
of what's offered by the operating system, 
facilitating communication and data management 
in distributed systems.



Message-Oriented Middleware (MOM)
----------------------------------------------
    Message-Oriented Middleware (MOM) facilitates communication
    between distributed systems through asynchronous message passing. 
    
    It enables applications to send and receive messages (data packets) 
    without requiring both parties to be actively communicating 
    at the same time.


    Example: RabbitMQ, Apache Kafka.
    Characteristics: Facilitates message passing between systems.
    Advantages: Asynchronous communication, scalability.
    Disadvantages: Complexity in message management, potential latency.
    

Remote Procedure Call (RPC) Middleware
----------------------------------------------

Remote Procedure Call (RPC) allows a program to
execute procedures or functions on another computer 
or server across a network, as if they were local. I

t abstracts the complexity of network communication 
and enables seamless interaction between distributed systems.



    Example: gRPC, Apache Thrift.
    Characteristics: Enables function calls between different systems.
    Advantages: Simplifies communication, high performance.
    Disadvantages: Tight coupling, difficulty in error handling.
    



Object Request Broker (ORB) Middleware
------------------------------------
    Object Request Broker (ORB) is a middleware
    component that enables communication and interaction 
    between distributed objects across a network. 
    
    It manages the exchange of messages and facilitates 
    the invocation of methods on remote objects as if they were local.


    Example: CORBA.
    Characteristics: Manages communication between distributed objects.
    Advantages: Object-oriented approach, language interoperability.
    Disadvantages: Complexity, performance overhead.




Database Middleware
-----------------------
    Database Middleware provides an interface between
    applications and databases in a distributed environment. 
    
    It facilitates data access, manipulation, and management 
    across multiple databases or database systems, ensuring data 
    consistency and reliability.


    Example: ODBC, JDBC.
    Characteristics: Provides uniform access to multiple databases.
    Advantages: Database abstraction, flexibility.
    Disadvantages: Performance overhead, potential compatibility issues
    






==========================================
2.3 System Architecture
==========================================

System architecture defines the overall structure, 
behavior, and more views of a system, encompassing both
hardware and software components.



Hardware Architecture
-------------------------
    Components: Physical servers, networking equipment.
    Characteristics: Physical layout, resource allocation.
    Advantages: Performance, dedicated resources.
    Disadvantages: Cost, inflexibility.



Software Architecture
-------------------------
    Components: Applications, services.
    Characteristics: Logical organization, component interaction.
    Advantages: Modularity, maintainability.
    Disadvantages: Potential complexity, integration challenges.


Network Architecture
-------------------------
    Components: Routers, switches, protocols.
    Characteristics: Network topology, communication protocols.
    Advantages: Connectivity, data exchange.
    Disadvantages: Latency, potential bottlenecks.



Data Architecture
-------------------------
    Components: Databases, data warehouses.
    Characteristics: Data storage, management, and retrieval.
    Advantages: Data integrity, accessibility.
    Disadvantages: Storage costs, data security concerns.










==========================================
2.4 Example Architectures
==========================================

Example architectures illustrate practical
implementations of architectural concepts, providing
insights into their application, benefits, and drawbacks.





Monolithic Architecture
----------------------------
    Example: Traditional enterprise applications.
    Characteristics: Single, unified codebase; tightly coupled components.
    Advantages: Simple deployment, centralized management.
    Disadvantages: Hard to scale, difficult to maintain.


Microservices Architecture
----------------------------
    Example: Netflix, Amazon.
    Characteristics: Independent services, each with a specific functionality.
    Advantages: Scalability, fault isolation, ease of deployment.
    Disadvantages: Complexity in management, inter-service communication overhead.


Serverless Architecture
----------------------------
    Example: AWS Lambda, Google Cloud Functions.
    Characteristics: Event-driven execution, no server management.
    Advantages: Cost efficiency, scalability, reduced operational overhead.
    Disadvantages: Cold start latency, limited execution time.


Event-Driven Architecture
----------------------------
    Example: IoT applications, real-time analytics.
    Characteristics: Components react to events, asynchronous communication.
    Advantages: High decoupling, real-time processing.
    Disadvantages: Complexity in event management, debugging challenges.
    


















*********************************************************************
*********************************************************************
LAB 1 - MICROSERVICE             START
*********************************************************************
*********************************************************************

To demonstrate a microservice using Docker, you
can use a simple example where you create a microservice
in Python using Flask. 




controlplane $ mkdir my_bca_app
controlplane $ cd my_bca_app/







Create a Flask Microservice:
---------------------------------
First, create a simple Flask 
application in a Python





controlplane $ cat > app.py


# app.py
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/')
def home():
    return jsonify(message="Hello, World!, from BCA 6")

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)



Write a Dockerfile:
-------------------
Next, write a Dockerfile to
containerize this Flask application:

controlplane $ cat > Dockerfile

# Dockerfile
FROM python:3.9-slim

WORKDIR /app

COPY app.py /app

RUN pip install Flask

EXPOSE 5000

CMD ["python", "app.py"]




Build and Run the Docker Container:
---------------------------------
Now, you can use inline Docker 
commands to build and run this microservice.

# Build the Docker image
controlplane $ docker build -t flask-microservice .


        DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
                    Install the buildx component to build images with BuildKit:
                    https://docs.docker.com/go/buildx/
        
        Sending build context to Docker daemon  3.072kB
        Step 1/6 : FROM python:3.9-slim
        3.9-slim: Pulling from library/python
        2cc3ae149d28: Pull complete 
        87c0edd565e2: Pull complete 
        9b72c177d6b8: Pull complete 
        74338068cff9: Pull complete 




controlplane $ docker images
REPOSITORY           TAG        IMAGE ID       CREATED          SIZE
flask-microservice   latest     1086a99d55fe   39 seconds ago   138MB
python               3.9-slim   462828d2b59e   3 months ago     126MB




controlplane $ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES


# Run the Docker container
controlplane $  docker run -d -p 5000:5000 flask-microservice




controlplane $ docker ps
CONTAINER ID   IMAGE                COMMAND           CREATED         STATUS         PORTS                                       NAMES
66ac65da48e2   flask-microservice   "python app.py"   4 seconds ago   Up 2 seconds   0.0.0.0:5000->5000/tcp, :::5000->5000/tcp   kind_shtern






    BROWSER: IP:5000


 OUTPUT:        {"message":"Hello, World!, from BCA 6"}






*********************************************************************
*********************************************************************
LAB 1 - MICROSERVICE             END
*********************************************************************
*********************************************************************

























*********************************************************************
*********************************************************************
LAB 2 - Client-Server Architecture             START
*********************************************************************
*********************************************************************




To create a simple Client-Server Architecture lab using a
Linux machine , we'll implement a basic scenario where
a client sends a message to a server and the server
responds back. Here’s how you can set it up:




controlplane $ mkdir mero-clinet-server
controlplane $ cd mero-clinet-server/


Create the Server Script:
------------------------------
Open a text editor and create a file 
named server.py with the following content:


controlplane $ cat > server.py

# server.py
import socket

# Define the host and port on which the server will listen
HOST = '0.0.0.0'  # Allows connections from any network interface
PORT = 12345      # Port to listen on

# Create a socket object
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
    # Bind the socket to the host and port
    server_socket.bind((HOST, PORT))

    # Start listening for incoming connections
    server_socket.listen()

    print(f"Server is listening on {HOST}:{PORT}")

    # Accept incoming connection
    client_socket, client_address = server_socket.accept()

    with client_socket:
        print(f"Connected by {client_address}")

        # Receive data from the client
        data = client_socket.recv(1024).decode('utf-8')
        print(f"Received message from client: {data}")

        # Send a response back to the client
        client_socket.sendall(b"Message received by server. Thank you!")

        # Close the connection
        print("Closing connection with the client.")




controlplane $ python3 server.py 
Server is listening on 0.0.0.0:12345





Client Side (Linux Machine)
-----------------------------TAB 2
Create the Client Script:

Open another text editor and create
a file named client.py with the following content:




controlplane $ cat > client.py


# client.py
import socket

# Define the server's host and port
SERVER_HOST = 'server_ip_or_hostname'  # Replace with the actual IP address or hostname of the server
SERVER_PORT = 12345                    # Port on which the server is listening

# Create a socket object
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:
    # Connect to the server
    client_socket.connect((SERVER_HOST, SERVER_PORT))

    # Send a message to the server
    message = "Hello, server! How are you?"
    client_socket.sendall(message.encode('utf-8'))

    # Receive the server's response
    data = client_socket.recv(1024).decode('utf-8')
    print(f"Received from server: {data}")


controlplane $ ip a

controlplane $ hostname -I
172.30.1.2 172.17.0.1 192.168.0.0 

controlplane $ vi client.py 

        :wq



controlplane $ cat client.py 
SERVER_PORT = 12345                    # Port on which the server is listening







TAB 2 controlplane $ python3 client.py
Received from server: Message received by server. Thank you!





TAB1 controlplane $ python3 server.py 
Server is listening on 0.0.0.0:12345
Connected by ('172.30.1.2', 34838)
Received message from client: Hello, server! How are you?
Closing connection with the client




*********************************************************************
*********************************************************************
LAB 2 - Client-Server Architecture             END
*********************************************************************
*********************************************************************


























*********************************************************************
*********************************************************************
LAB 3 - Client-Server Architecture              START
*********************************************************************
*********************************************************************



single inline command to install Apache 
on an Ubuntu machine 
----------------------------------------------

controlplane $ sudo apt-get update && sudo apt-get install -y apache2





To ensure Apache is installed correctly and 
running, you can use the following command 
to check its status:
--------------------------------------------
controlplane $ sudo systemctl status apache2





Create an Index File
-----------------------------------
Next, create a custom index file to verify
that your Apache server is serving content correctly.

controlplane $ echo "<h1>Welcome to My Apache Server, this is BCA6 as distro class </h1>" | sudo tee /var/www/html/index.html





Check the Index File
------------------------
To verify that the Apache server is correctly 
serving the index file, open a web browser and 
navigate to http://localhost. 

You should see "Welcome to My Apache Server".


controlplane $ curl http://localhost




BROWSER-    IP:80
-------------------





 Locate the Log Files
------------------------

Apache's default log files are typically 
located in the /var/log/apache2 directory.

Access Log: /var/log/apache2/access.log
Error Log: /var/log/apache2/error.log



controlplane $ sudo tail -f /var/log/apache2/access.log


10.244.3.130 - - [21/Jun/2024:03:19:27 +0000] "GET / HTTP/1.1" 200 295 "-" "Mozilla/5.0 (iPhone; CPU iPhone OS 15_8_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 [FBAN/FBIOS;FBAV/462.0.0.35.110;FBBV/609503125;FBDV/iPhone9,4;FBMD/iPhone;FBSN/iOS;FBSV/15.8.2;FBSS/3;FBCR/;FBID/phone;FBLC/en_US;FBOP/80]"


====


10.244.5.88 - - [21/Jun/2024:03:19:45 +0000] "GET / HTTP/1.1" 304 124 "https://killercoda.com/" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"








controlplane $ sudo tail -f /var/log/apache2/error.log



To generate an error, try 
accessing a non-existent page:
    controlplane $ curl http://localhost/nonexistent
















explanation access logs 
----------------------
10.244.3.130 - - [21/Jun/2024:03:19:27 +0000] "GET / HTTP/1.1" 200 295 "-" "Mozilla/5.0 (iPhone; CPU iPhone OS 15_8_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 [FBAN/FBIOS;FBAV/462.0.0.35.110;FBBV/609503125;FBDV/iPhone9,4;FBMD/iPhone;FBSN/iOS;FBSV/15.8.2;FBSS/3;FBCR/;FBID/phone;FBLC/en_US;FBOP/80]"








10.244.3.130: 
    The IP address of the client making the request. 
    This tells you where the request originated from.

- -:
    These two dashes typically represent the identity of the 
    client and the user ID. 
    They are placeholders because this information 
    is not usually available or used.


[21/Jun/2024:03:19:27 +0000]:
    The timestamp of when the request was received by the server. 
    It includes the date (21/Jun/2024) and time (03:19:27) with the 
    timezone offset (+0000).



"GET / HTTP/1.1":
    The request line from the client. This shows the HTTP method (GET),
    the requested resource (/), and the HTTP version (HTTP/1.1).


200:
    The HTTP status code returned by the server. 
    A status code of 200 indicates that the request was successful.

295:
    The size of the response in bytes. 
    This tells you how much data was sent back to the client.

"-":
    The referrer URL, which indicates where the request originated from.
    In this case, it's "-", meaning there was no referrer.


"Mozilla/5.0 (iPhone; CPU iPhone OS 15_8_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 [FBAN/FBIOS;FBAV/462.0.0.35.110;FBBV/609503125;FBDV/iPhone9,4;FBMD/iPhone;FBSN/iOS;FBSV/15.8.2;FBSS/3;FBCR/;FBID/phone;FBLC/en_US;FBOP/80]":

    The user agent string. 
    This provides information about the client's browser and operating system. 
    
    In this case, it indicates that the request was made from a mobile device (iPhone) running iOS 15.8.2, 
    using a browser based on AppleWebKit.
    
    Understanding the User Agent String
    The user agent string contains detailed information about the client:






        Mozilla/5.0: 
            A common string used by many browsers for compatibility.
        
        (iPhone; CPU iPhone OS 15_8_2 like Mac OS X): 
            Specifies the device (iPhone) and the operating 
            system (iPhone OS 15.8.2, similar to Mac OS X).
        
        AppleWebKit/605.1.15 (KHTML, like Gecko): 
            Indicates the browser engine (AppleWebKit) used by Safari and other browsers on iOS.
        
        Mobile/15E148: 
            Indicates a mobile device with a specific build number (15E148).
        
        [FBAN/FBIOS; FBAV/462.0.0.35.110; FBBV/609503125; FBDV/iPhone9,4; FBMD/iPhone; 
            FBSN/iOS; FBSV/15.8.2; FBSS/3; FBCR/; FBID/phone; FBLC/en_US; 
            FBOP/80]: 
            This part of the user agent string is specific to Facebook's mobile app 
            browser, providing details such as the app version (FBAV/462.0.0.35.110), 
            the device model (FBDV/iPhone9,4), and the operating system version (FBSV/15.8.2).
            



*********************************************************************
*********************************************************************
LAB 3 - Client-Server Architecture            END
*********************************************************************
*********************************************************************



















*********************************************************************
*********************************************************************
LAB 4 - Remote Procedure Call (RPC) Middleware             START
*********************************************************************
*********************************************************************


    Remote Procedure Call (RPC) Middleware
    ----------------------------------------------
    Example: gRPC, Apache Thrift.




It is a protocol that one program can use to request 
a service from a program located on another computer in a network. 

RPC abstracts the complexity of network communication
by allowing a program to call a procedure (function) 
on a remote server as if it were a local call.




simple lab of Remote Procedure Call (RPC) middleware
on an Ubuntu Linux terminal, 

you can use gRPC, which is a modern open-source RPC 
framework developed by Google. 

Below are the steps to set up a basic gRPC 
service and client in Python.



Install Dependencies
-----------------------
First, ensure you have Python and pip installed.
Then, install the necessary gRPC tools:


controlplane $ sudo apt update
controlplane $  sudo apt install python3 python3-pip
controlplane $  pip3 install grpcio grpcio-tools






Define the gRPC Service
-------------------------
Create a file named helloworld.proto 
to define the service:


controlplane $ cat > helloworld.proto


syntax = "proto3";

package helloworld;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}








Generate Python Code from the Proto File
------------------------------------------
Run the following command to generate the gRPC code:


This will generate two files: helloworld_pb2.py and helloworld_pb2_grpc.py.




controlplane $ ls
 helloworld.proto  




controlplane $ python3 -m grpc_tools.protoc -I=. --python_out=. --grpc_python_out=. helloworld.proto


controlplane $ ls
 helloworld.proto  helloworld_pb2.py  helloworld_pb2_grpc.py  









 Implement the gRPC Server
----------------------------
Create a file named server.py:



controlplane $ cat > server.py

from concurrent import futures
import grpc
import helloworld_pb2
import helloworld_pb2_grpc

class Greeter(helloworld_pb2_grpc.GreeterServicer):
    def SayHello(self, request, context):
        return helloworld_pb2.HelloReply(message='Hello, %s!' % request.name)

def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    helloworld_pb2_grpc.add_GreeterServicer_to_server(Greeter(), server)
    server.add_insecure_port('[::]:50051')
    server.start()
    print("Server started at [::]:50051")
    server.wait_for_termination()

if __name__ == '__main__':
    serve()









Implement the gRPC Client
----------------------------
Create a file named client.py:



controlplane $ cat > client.py


import grpc
import helloworld_pb2
import helloworld_pb2_grpc

def run():
    channel = grpc.insecure_channel('localhost:50051')
    stub = helloworld_pb2_grpc.GreeterStub(channel)
    response = stub.SayHello(helloworld_pb2.HelloRequest(name='World'))
    print("Greeter client received: " + response.message)

if __name__ == '__main__':
    run()







Run the Server and Client
-----------------------------
Open two terminal windows. 

In the first terminal, run the server:
In the second terminal, run the client:



TERMINAL 1  controlplane $ python3 server.py 
Server started at [::]:50051




TERMINAL2 controlplane $ python3 client.py 
Greeter client received: Hello, World!





*********************************************************************
*********************************************************************
LAB 4 -  Remote Procedure Call (RPC) Middleware          END
*********************************************************************
*********************************************************************















*********************************************************************
*********************************************************************
LAB 5 -     Message-Oriented Middleware using RabbitMQ         START
*********************************************************************
*********************************************************************

To perform a lab of Message-Oriented Middleware 
using RabbitMQ on an Ubuntu Linux terminal, follow these steps.
This lab will involve installing RabbitMQ, setting it up, 
and creating a simple producer and consumer in Python to demonstrate message queuing.



Install RabbitMQ
----------------
First, ensure your system is up-to-date and install RabbitMQ:

sudo apt update
sudo apt install rabbitmq-server



Start the RabbitMQ server:

sudo systemctl start rabbitmq-server
sudo systemctl enable rabbitmq-server


Check the status of the RabbitMQ server:
sudo systemctl status rabbitmq-server





Install Python and Pika
----------------------
Pika is a pure-Python RabbitMQ client library:

Create a file named producer.py:



cat > producer.py

import pika

# Establish a connection to RabbitMQ server
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

# Declare a queue named 'hello'
channel.queue_declare(queue='hello')

# Publish a message to the queue
channel.basic_publish(exchange='', routing_key='hello', body='Hello, World!')
print(" [x] Sent 'Hello, World!'")

# Close the connection
connection.close()




Create a RabbitMQ Consumer
Create a file named consumer.py:

cat > consumer.py
import pika

# Establish a connection to RabbitMQ server
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

# Declare a queue named 'hello'
channel.queue_declare(queue='hello')

# Define a callback function to process messages from the queue
def callback(ch, method, properties, body):
    print(f" [x] Received {body}")

# Subscribe to the queue
channel.basic_consume(queue='hello', on_message_callback=callback, auto_ack=True)

print(' [*] Waiting for messages. To exit press CTRL+C')
# Start consuming messages
channel.start_consuming()







Run the Producer and Consumer
----------------------------
Open two terminal windows.

In the first terminal, run the consumer:

python3 consumer.py




In the second terminal, run the producer:

python3 producer.py




*********************************************************************
*********************************************************************
LAB 5 -   Message-Oriented Middleware using RabbitMQ         END
*********************************************************************
*********************************************************************












*********************************************************************
*********************************************************************
LAB 3 -              START
*********************************************************************
*********************************************************************



*********************************************************************
*********************************************************************
LAB 3 -            END
*********************************************************************
*********************************************************************

