


=========================
histogram labs
=========================


To perform histogram labs of image processing visually using Docker, you 
can follow these steps. We'll create a Docker environment that includes necessary
libraries (such as OpenCV and Jupyter Notebook) to perform and visualize histogram operations on images.



Step 1: Create a Dockerfile
----------------------------------
First, create a Dockerfile that sets up a Python environment with OpenCV and Jupyter Notebook. This will allow us to interactively work on image processing tasks.

# Use the official Python image from the Docker Hub
FROM python:3.8-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    libsm6 \
    libxext6 \
    libxrender-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
RUN pip install \
    opencv-python-headless \
    matplotlib \
    jupyter

# Set the working directory in the container
WORKDIR /workspace

# Copy the current directory contents into the container at /workspace
COPY . /workspace

# Expose the port for Jupyter Notebook
EXPOSE 8888

# Run Jupyter Notebook
CMD ["jupyter", "notebook", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]






Step 2: Build the Docker Image
----------------------------------
Navigate to the directory containing your Dockerfile and build the Docker image.


docker build -t image-processing-histogram .




Step 3: Run the Docker Container
----------------------------------
Run the container with port mapping to access Jupyter Notebook from your host machine.

docker run -p 8888:8888 -v $(pwd):/workspace image-processing-histogram




Step 4: Access Jupyter Notebook
----------------------------------
Open your web browser and navigate to 


http://localhost:8888. 


You should see the Jupyter Notebook interface. If a token is required, it will be
displayed in the terminal where you ran the Docker command.



Step 5: Create a Jupyter Notebook for Histogram Processing
--------------------------------------------------------------------
Create a new Jupyter Notebook and add the following code to perform histogram operations on an image.

Code: Histogram Processing
Upload an Image

First, upload an image to the working directory of your Jupyter Notebook.



Histogram Processing Code
Create a new Jupyter Notebook cell and add the following code:

import cv2
import numpy as np
from matplotlib import pyplot as plt

# Load an image from file
image = cv2.imread('your_image.jpg', cv2.IMREAD_GRAYSCALE)

# Calculate the histogram
hist = cv2.calcHist([image], [0], None, [256], [0, 256])

# Plot the histogram
plt.figure()
plt.title("Grayscale Histogram")
plt.xlabel("Bins")
plt.ylabel("# of Pixels")
plt.plot(hist)
plt.xlim([0, 256])
plt.show()

# Display the original image
plt.figure()
plt.title("Original Image")
plt.imshow(image, cmap='gray')
plt.axis('off')
plt.show()


Replace 'your_image.jpg' with the name of the image file you uploaded.



Step 6: Visualize Histogram and Image
----------------------------------------------------------
Run the notebook cell to visualize the histogram and the original image. 
You should see the histogram plot showing the distribution of pixel intensities and the original 
grayscale image displayed below it.



Conclusion
----------------------------------------------------------
By following these steps, you have set up a Docker container with a Jupyter 
Notebook environment to perform and visualize histogram operations on images using OpenCV. 
This approach allows you to interactively explore image processing techniques and view the results in real-time.






