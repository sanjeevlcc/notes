

Distributed Systems
===================
A distributed system is a network of independent computers that work together to achieve a common goal. 
These systems enable resource sharing, improved performance, and fault tolerance. 

A distributed system is a collection of computer programs that utilize computational 
resources across multiple, separate computation nodes to achieve a common, 
shared goal. 

Distributed systems aim to remove bottlenecks or central points of failure from a system



                                    Distributed System Example: Client-Server Model
                                    -----------------------------------------------
                                    
                                               +------------+
                                               |   Client   |
                                               +-----+------+
                                                     |
                                                     | HTTP Request
                                                     v
                                              +------+--------+
                                              |   Web Server  |
                                              +------+--------+
                                                     |
                                                     | Database Query
                                                     v
                                           +---------+----------+
                                           |   Database Server  |
                                           +--------------------+



Characteristics of Distributed Systems
------------------------------------
Heterogeneity: Components of a distributed system can vary in terms of hardware, operating systems, and network protocols.
Scalability: The system can easily expand by adding more nodes without significant changes to the architecture or performance issues.
Transparency: The complexity of the system is hidden from the user, who perceives it as a single coherent system.

      Fault Tolerance: 
      ----------------
      The system can continue to operate properly in the event of the failure of some of its components.
      
      
      Concurrency: 
      ----------------
      Multiple processes can occur simultaneously, leveraging the distributed 
      nature to enhance performance.
      
      
      Resource Sharing: 
      ----------------
      Resources such as files, printers, and storage devices are shared among 
      users across the network.


      Openness: 
      ----------------
      The system can be extended or improved with new components and features.
      



Design Goals of Distributed Systems
------------------------------------
    Transparency: 
    ----------------
    Ensure that the distributed nature of the system is invisible to users, 
    encompassing access, location, migration, replication, concurrency, and failure transparency.

    Scalability: Design the system to handle growth in users, data, and resources efficiently.
    ------------
    
    Reliability: Provide mechanisms for fault detection, recovery, and maintaining service continuity.
    ------------
    
    Performance: Optimize the system for high performance, balancing the load and minimizing latency.
    ------------
    
    
    Security: Protect the system against unauthorized access, data breaches, and other security threats.
    ------------
    
    
    Flexibility: Enable easy adaptation to changes in the environment, technology, and user requirements.
    ------------


Types of Distributed Systems
------------------------------------
        Client-Server Model: 
        ----------------------
        Clients request services and resources from centralized servers. 
        Examples include web servers and database servers.
        
        
        
        Peer-to-Peer (P2P) Model: 
        -------------------------
        Each node, or peer, has equivalent capabilities and responsibilities, 
        sharing resources directly without centralized coordination. 
        Examples include file-sharing networks like BitTorrent.

                                 (Node 1)               (Node 2)
                                  +---+                  +---+
                                  | 1 |---+          +---| 2 |
                                  +---+   |          |   +---+
                                   |      |          |      |
                                   |      +---+  +---+      |
                                   |          |  |          |
                                   |          |  |          |
                                  +---+       |  |       +---+
                                  | 3 |-------+  +-------| 4 |
                                  +---+                  +---+
                                (Node 3)               (Node 4)



        
        Three-Tier Architecture: 
        -------------------------
        Comprising a presentation layer (client), an application layer (business logic), 
        and a data layer (database). Common in web applications.
        
        
        Multi-Tier Architecture: 
        ------------------------
        Similar to three-tier but with more than three layers, enhancing 
        modularity and scalability.
        
        
        Distributed Databases: 
        ----------------------
        Databases spread across multiple locations, where data management 
        is handled collaboratively.
        
        
        
        Distributed Computing Systems: 
        ------------------------------
        Systems that distribute computational tasks across multiple nodes, such as 
        grid computing and cloud computing.
        







Case Study: World Wide Web (WWW)
------------------------------------

Characteristics
---------------
      Global Accessibility: 
      -----------------------
      The WWW enables global access to information through web browsers.
      
      
      Decentralization: 
      -----------------------
      The WWW is decentralized, with no central control, allowing 
      distributed content creation and management.
      
      
      Heterogeneous Network: 
      -----------------------
      The WWW operates over various networks, supporting different 
      types of devices and operating systems.



Design Goals
-----------------------
      Scalability: 
      -----------------------
      Handle an ever-growing number of users and data without performance degradation.
      
      
      Performance: 
      -----------------------
      Deliver content quickly through caching, content delivery networks (CDNs), and efficient web protocols.
      
      
      Reliability: 
      -----------------------
      Ensure high availability and uptime through redundant systems and fault-tolerant infrastructure.
      
      
      Security: 
      -----------------------
      Protect user data and maintain privacy through HTTPS, secure sockets layer (SSL), and other security measures.
      
      
      Interoperability: 
      -----------------------
      Ensure compatibility across different platforms and devices using standard protocols like HTTP and HTML.




Implementation
-----------------------
        HTTP Protocol: 
        --------------
        The Hypertext Transfer Protocol (HTTP) is the foundation of data communication on the WWW.
        
        Web Browsers: 
        --------------
        Clients like Chrome, Firefox, and Safari request and display web pages.
        
        Web Servers: 
        --------------
        Servers like Apache, Nginx, and IIS handle requests from web browsers and deliver content.
        
        HTML/CSS/JavaScript: 
        --------------
        Standard languages for creating and designing web content.
        
        CDNs: 
        --------------
        Networks of servers that distribute content globally to reduce latency and improve load times.
                              
                                    +-----------------+
                                    |  Origin Server  |
                                    +-----------------+
                                             |
                                             | Push Content
                                             v
                                  +------------------+          +------------------+
                                  | CDN Edge Server 1|  <---->  | CDN Edge Server 2|
                                  +------------------+          +------------------+
                                             |                           |
                                             |                           |
                                   +---------+---------+      +----------+---------+
                                   |     User 1        |      |      User 2        |
                                   +-------------------+      +--------------------+



        Search Engines: 
        --------------
        Services like Google and Bing index and rank web content, making it easily searchable.


Example: Google's Search Infrastructure

      Scalability: 
      --------------
      Googleâ€™s infrastructure is designed to handle billions of search queries daily.
      
      Performance: 
      --------------
      Uses highly optimized algorithms and distributed data centers to deliver search results in milliseconds.
      
      Reliability: 
      --------------
      Employs redundant systems and real-time data replication to ensure continuous service availability.
      
      Security: 
      --------------
      Implements robust security protocols to protect user data and search integrity.
      
      Interoperability: 
      --------------
      Compatible with various devices and platforms, providing a consistent user experience.
      
      












